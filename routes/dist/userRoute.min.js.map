{"version":3,"sources":["userRoute.js"],"names":["express","require","app","Router","router","post","req","res","result","regeneratorRuntime","async","_context","prev","next","awrap","Usermodel","findOne","username","body","password","sent","send","status","json","t0","stop","save","err","user","_context2","findOneAndUpdate","_id","module","exports"],"mappings":"aAAA,IAAMA,QAAQC,QAAQ,WAClBC,IAAIF,UADFA,UAAQC,QAAQ,uBAClBC,OAAIF,QAARG,SAIAC,OAAOC,KAAK,aAAc,SAAOC,EAAKC,GAAZ,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAECC,UAAUC,QAAQ,CAHvCZ,SAAOJ,EAAQG,KAARc,SACNZ,SAAKC,EAAAY,KAAcC,YAAA,KAAA,GAEdX,EAFcG,EAAAS,MAAAb,EAAAc,KAAAb,GAAAD,EAAAe,OAAA,KAAAC,KAAA,gBAAAZ,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAa,GAAAb,EAAA,MAAA,GAGlBM,EAAAA,OAAAA,KAAUX,KAAVW,EAAAA,IAHkB,KAAA,GAAA,IAAA,MAAA,OAAAN,EAAAc,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAArB,OAAAC,KAAA,gBAAA,SAAAC,EAAAC,GAAA,IAAAQ,UAAA,CAAAE,SAAAX,EAAAY,KAAAD,SAAAE,SAAAb,EAAAY,KAAAC,WAmBdO,KAAK,SAASC,GAZpBA,EACEpB,EAAIc,OAAKb,KAATe,KAAA,2BAGDhB,EAAAc,KAAA,mCAiBPjB,OAAOC,KAAK,UAAW,SAAOC,EAAKC,GAAZ,IAAAqB,EAAA,OAAAnB,mBAAAC,MAAA,SAAAmB,GAAA,OAAA,OAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,KAAA,EAAA,OAAAgB,EAAAjB,KAAA,EAAAiB,EAAAhB,KAAA,EAAAJ,mBAAAK,MA5BGC,UAAAe,iBAAA,CAAAC,IAAAzB,EAAAY,KAAAa,KAAAzB,EAAAY,OA4BH,KAAA,EAAA,OAAAW,EAAAhB,KAAA,EAAAJ,mBAAAK,MA5BGC,UAAAC,QAAA,CAAAe,IAAAzB,EAAAY,KAAAa,OA4BH,KAAA,EA5BGH,EA4BHC,EAAAT,KAfjBb,EAAAA,KAAIe,GAeaO,EAAAhB,KAAA,GAAA,MAAA,KAAA,EAAAgB,EAAAjB,KAAA,EAAAiB,EAAAL,GAAAK,EAAA,MAAA,GA5BGtB,EAAAe,OAAA,KAAAC,KAAAM,EAAAL,IA4BH,KAAA,GAAA,IAAA,MAAA,OAAAK,EAAAJ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA5BGO,OAAAC,QAAA7B","file":"userRoute.min.js","sourcesContent":["const express=require('express')\r\nvar app=express()\r\nconst Usermodel=require('../models/usermodel')\r\n\r\nconst router=express.Router()\r\nrouter.post(\"/loginuser\", async (req, res) => {\r\n    try {\r\n      const result = await Usermodel.findOne({\r\n        username: req.body.username,\r\n        password: req.body.password,\r\n      });\r\n  \r\n      if (result) {\r\n        res.send(result);\r\n      } else {\r\n        res.status(400).json(\"Login failed\");\r\n      }\r\n    } catch (error) {\r\n      res.status(400).json(error);\r\n    }\r\n  });\r\n  \r\nrouter.post('/registeruser',(req,res)=>{   \r\n    var newuser=new Usermodel({username:req.body.username,password:req.body.password})\r\n    newuser.save(function(err){\r\n        if(err){\r\n            res.status(400).json(\"something error occured\")\r\n        }\r\n        else{\r\n                res.send(\"user registration succesful\")\r\n            }\r\n        })\r\n    })\r\nrouter.post(\"/update\", async (req, res) => {\r\n      try {\r\n        await Usermodel.findOneAndUpdate({ _id: req.body._id }, req.body);\r\n        const user = await Usermodel.findOne({ _id: req.body._id });\r\n        res.send(user);\r\n      } catch (error) {\r\n        res.status(400).json(error);\r\n      }\r\n    });\r\nmodule.exports=router;"]}